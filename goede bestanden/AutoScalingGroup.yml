Description: CloudShirt .NET Auto Scaling Group for spike traffic (6-8 PM ET)

Parameters:
  AccessKey:
    Type: String
  SecretKey:
    Type: String
  SessionToken:
    Type: String
  AccountId:
    Type: String
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance for ASG
  BucketName:
    Type: String
    Description: S3-bucket naam
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
    Default: vockey
  RepoUrl:
    Type: String
    Default: https://github.com/looking4ward/CloudShirt.git
    Description: Git repository URL for the CloudShirt solution
  RepoBranch:
    Type: String
    Default: main
    Description: Branch to checkout

Resources:
  CloudShirtLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CloudShirtLaunchTemplate
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ImageId: ami-0254b2d5c4c472488
        SecurityGroupIds:
          - !ImportValue base-stack:InstanceSG
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              export AWS_ACCESS_KEY_ID=${AccessKey}
              export AWS_SECRET_ACCESS_KEY=${SecretKey}
              export AWS_SESSION_TOKEN=${SessionToken}
              export AWS_DEFAULT_REGION=us-east-1
              export AWS_ACCOUNT_ID=${AccountId}

              yum update -y
              yum install -y gcc git unzip curl amazon-linux-extras amazon-efs-utils unixODBC unixODBC-devel

              rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
              yum install -y aspnetcore-runtime-6.0 dotnet-sdk-6.0

              amazon-linux-extras install nginx1 -y
              systemctl enable nginx

              # EFS Mount
              mkdir -p /mnt/efs
              mount -t efs -o tls ${EFS_DNS}:/ /mnt/efs
              echo "${EFS_DNS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab

              echo "${RDSENDPOINT}" > /mnt/efs/rds-endpoint
              echo "${BucketName}" > /mnt/efs/s3-name

              # Nginx directory maken voor logs
              mkdir -p /mnt/efs/nginx

              
              # Nginx config
              cat >/etc/nginx/conf.d/cloudshirt.conf <<'NGINX'
              server {
                  listen 80;
                  server_name _;
                  location / {
                      proxy_pass http://127.0.0.1:5000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection keep-alive;
                      proxy_set_header Host $host;
                      proxy_cache_bypass $http_upgrade;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_buffering off;
                  }
                  # Access en error log op EFS wegschrijven
                  access_log /mnt/efs/nginx/access.log;
                  error_log /mnt/efs/nginx/error.log;
              }
              NGINX

              APPROOT="/opt/cloudshirt"
              PUBLISH="$APPROOT/publish"
              mkdir -p "$APPROOT"
              chown ec2-user:ec2-user "$APPROOT"

              # CloudShirt en DB opzetten
              sudo -u ec2-user bash -lc "
                set -e
                git clone --branch ${RepoBranch} ${RepoUrl} $APPROOT/src
                cd $APPROOT/src/src/Web
                sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' appsettings.json
                sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.Identity;/' appsettings.json
                dotnet restore
                dotnet publish -c Release -o $PUBLISH
              "

              # Systemd service
              cat >/etc/systemd/system/cloudshirt.service <<'SERVICE'
              [Unit]
              Description=CloudShirt ASP.NET Core Web App
              After=network.target

              [Service]
              WorkingDirectory=/opt/cloudshirt/publish
              ExecStart=/usr/bin/dotnet /opt/cloudshirt/publish/Web.dll
              Restart=always
              RestartSec=5
              KillSignal=SIGINT
              SyslogIdentifier=cloudshirt
              User=ec2-user
              Environment=ASPNETCORE_ENVIRONMENT=Production
              Environment=ASPNETCORE_URLS=http://0.0.0.0:5000

              [Install]
              WantedBy=multi-user.target
              SERVICE

              systemctl daemon-reload
              systemctl enable cloudshirt
              systemctl start cloudshirt
              systemctl restart nginx

              # Install Filebeat
              rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

              cat <<EOF > /etc/yum.repos.d/elastic.repo
              [elastic-8.x]
              name=Elastic repository for 8.x packages
              baseurl=https://artifacts.elastic.co/packages/8.x/yum
              gpgcheck=1
              gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
              enabled=1
              autorefresh=1
              type=rpm-md
              EOF

              yum install -y filebeat

              # Disable default Elasticsearch output (to avoid multiple outputs)
              sed -i 's/^output.elasticsearch:/#output.elasticsearch:/' /etc/filebeat/filebeat.yml
              sed -i 's/^  hosts:/#  hosts:/' /etc/filebeat/filebeat.yml

              # Append clean Logstash output block at the end of filebeat.yml
              cat <<EOT >> /etc/filebeat/filebeat.yml

              output.logstash:
                hosts: ["${ELKPublicIP}:5044"]
              EOT

              # Enable system module for Filebeat
              filebeat modules enable system

              # Configure system module (syslog + auth)
              cat <<EOF > /etc/filebeat/modules.d/system.yml
              - module: system
                syslog:
                  enabled: true
                  var.paths: ["/var/log/messages"]
                auth:
                  enabled: true
                  var.paths: ["/var/log/secure"]
              EOF

              # Enable and start Filebeat
              systemctl enable filebeat
              systemctl restart filebeat

              # SQLCMD en BCP
              curl -O https://packages.microsoft.com/rhel/8/prod/msodbcsql17-17.10.6.1-1.x86_64.rpm
              ACCEPT_EULA=Y yum localinstall -y msodbcsql17-17.10.6.1-1.x86_64.rpm
              
              curl -O https://packages.microsoft.com/rhel/8/prod/mssql-tools-17.10.1.1-1.x86_64.rpm
              ACCEPT_EULA=Y yum localinstall -y mssql-tools-17.10.1.1-1.x86_64.rpm

              echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> /etc/profile.d/mssql-tools.sh
              chmod +x /etc/profile.d/mssql-tools.sh
              source /etc/profile.d/mssql-tools.sh

              bcp -v
              sqlcmd -? 

              cd "/home/ec2-user"
              echo "Current directory: $(pwd)"

              curl -O https://raw.githubusercontent.com/537845Ahmed/CloudShirt/refs/heads/main/goede%20bestanden/export-rds.sh
              chmod +x export-rds.sh


            - RDSENDPOINT: !ImportValue rds-stack:RDSEndpointAddress
              DBUsername: !ImportValue rds-stack:RDSUsername
              DBPassword: !ImportValue rds-stack:RDSPassword
              EFS_DNS: !ImportValue efs-stack:EFSDNS
              ELKPublicIP: !ImportValue elk-stack:ELKPublicIP

  CloudShirtASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: CloudShirtASG
      LaunchTemplate:
        LaunchTemplateId: !Ref CloudShirtLaunchTemplate
        Version: !GetAtt CloudShirtLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier: 
        - !ImportValue base-stack:CloudShirtFirstSubnet
        - !ImportValue base-stack:CloudShirtSecondSubnet
      TargetGroupARNs:
        - !ImportValue WebTargetGroup
      Tags:
        - Key: Name
          Value: CloudShirt-Web-ASG
          PropagateAtLaunch: true

  ScaleOutScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref CloudShirtASG
      ScheduledActionName: ScaleOutSpikeHours
      DesiredCapacity: 3
      Recurrence: "0 12 * * *"

  ScaleInScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref CloudShirtASG
      ScheduledActionName: ScaleInAfterSpike
      DesiredCapacity: 2
      Recurrence: "0 13 * * *"

