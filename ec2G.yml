AWSTemplateFormatVersion: 2010-09-09
Description: >
  Deploy Amazon RDS SQL Server instance and two Amazon Linux 2 EC2 instances with .NET 6, 
  nginx reverse proxy, CloudShirt web app, and Filebeat configuration for centralized logging to ELK.

Parameters:
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type (t3.small aanbevolen voor .NET)
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access
  RepoUrl:
    Type: String
    Default: https://github.com/looking4ward/CloudShirt.git
    Description: Git repository URL for the CloudShirt solution
  RepoBranch:
    Type: String
    Default: main
    Description: Branch to checkout
  SSHCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range allowed to SSH into the instances

Resources:
  ## =========================
  ## Web Instance 1
  ## =========================
  WebInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0254b2d5c4c472488 # Amazon Linux 2
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !ImportValue base-stack:CloudShirtFirstSubnet
      SecurityGroupIds:
        - !ImportValue base-stack:InstanceSG
      Tags:
        - Key: Name
          Value: CloudShirt-Web-1
        - Key: Project
          Value: CloudShirt
        - Key: Environment
          Value: dev
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            yum update -y
            yum install -y gcc git unzip curl amazon-linux-extras

            rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
            yum install -y aspnetcore-runtime-6.0 dotnet-sdk-6.0

            amazon-linux-extras install nginx1 -y
            systemctl enable nginx

            # EFS Mount
            # mkdir -p /mnt/efs
            # mount -t nfs4 -o tls ${EFS_ID}:/ /mnt/efs
            # echo "${EFS_ID}:/ /mnt/efs nfs4 defaults,_netdev 0 0" >> /etc/fstab

            # Nginx config
            cat >/etc/nginx/conf.d/cloudshirt.conf <<'NGINX'
            server {
                listen 80;
                server_name _;
                location / {
                    proxy_pass http://127.0.0.1:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection keep-alive;
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_buffering off;
                }
                #access_log /mnt/efs/nginx/access.log;
                #error_log /mnt/efs/nginx/error.log;
            }
            NGINX

            APPROOT="/opt/cloudshirt"
            PUBLISH="$APPROOT/publish"
            mkdir -p "$APPROOT"
            chown ec2-user:ec2-user "$APPROOT"

            sudo -u ec2-user bash -lc "
              set -e
              git clone --branch ${RepoBranch} ${RepoUrl} $APPROOT/src
              cd $APPROOT/src/src/Web
              sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' appsettings.json
              sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.Identity;/' appsettings.json
              dotnet restore
              dotnet publish -c Release -o $PUBLISH
            "

            # Systemd service
            cat >/etc/systemd/system/cloudshirt.service <<'SERVICE'
            [Unit]
            Description=CloudShirt ASP.NET Core Web App
            After=network.target

            [Service]
            WorkingDirectory=/opt/cloudshirt/publish
            ExecStart=/usr/bin/dotnet /opt/cloudshirt/publish/Web.dll
            Restart=always
            RestartSec=5
            KillSignal=SIGINT
            SyslogIdentifier=cloudshirt
            User=ec2-user
            Environment=ASPNETCORE_ENVIRONMENT=Production
            Environment=ASPNETCORE_URLS=http://0.0.0.0:5000

            [Install]
            WantedBy=multi-user.target
            SERVICE

            systemctl daemon-reload
            systemctl enable cloudshirt
            systemctl start cloudshirt
            systemctl restart nginx

            # Install Filebeat
            rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

            cat <<EOF > /etc/yum.repos.d/elastic.repo
            [elastic-8.x]
            name=Elastic repository for 8.x packages
            baseurl=https://artifacts.elastic.co/packages/8.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=1
            autorefresh=1
            type=rpm-md
            EOF

            yum install -y filebeat

            # Disable default Elasticsearch output (to avoid multiple outputs)
            sed -i 's/^output.elasticsearch:/#output.elasticsearch:/' /etc/filebeat/filebeat.yml
            sed -i 's/^  hosts:/#  hosts:/' /etc/filebeat/filebeat.yml

            # Append clean Logstash output block at the end of filebeat.yml
            cat <<EOT >> /etc/filebeat/filebeat.yml

            output.logstash:
              hosts: ["${ELKPublicIP}:5044"]
            EOT

            # Enable system module for Filebeat
            filebeat modules enable system

            # Configure system module (syslog + auth)
            cat <<EOF > /etc/filebeat/modules.d/system.yml
            - module: system
              syslog:
                enabled: true
                var.paths: ["/var/log/messages"]
              auth:
                enabled: true
                var.paths: ["/var/log/secure"]
            EOF

            # Enable and start Filebeat
            systemctl enable filebeat
            systemctl restart filebeat

          - RDSENDPOINT: !ImportValue rds-stack:RDSEndpointAddress
            DBUsername: !ImportValue rds-stack:RDSUsername
            DBPassword: !ImportValue rds-stack:RDSPassword
            EFS_ID: !ImportValue efs-stack:EFSid
            ELKPublicIP: !ImportValue elk-stack:ELKPublicIP

  ## =========================
  ## Web Instance 2 (identiek)
  ## =========================
  WebInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0254b2d5c4c472488
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !ImportValue base-stack:CloudShirtSecondSubnet
      SecurityGroupIds:
        - !ImportValue base-stack:InstanceSG
      Tags:
        - Key: Name
          Value: CloudShirt-Web-2
        - Key: Project
          Value: CloudShirt
        - Key: Environment
          Value: dev
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            yum update -y
            yum install -y gcc git unzip curl amazon-linux-extras

            rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
            yum install -y aspnetcore-runtime-6.0 dotnet-sdk-6.0

            amazon-linux-extras install nginx1 -y
            systemctl enable nginx

            # EFS Mount
            # mkdir -p /mnt/efs
            # mount -t nfs4 -o tls ${EFS_ID}:/ /mnt/efs
            # echo "${EFS_ID}:/ /mnt/efs nfs4 defaults,_netdev 0 0" >> /etc/fstab

            # Nginx config
            cat >/etc/nginx/conf.d/cloudshirt.conf <<'NGINX'
            server {
                listen 80;
                server_name _;
                location / {
                    proxy_pass http://127.0.0.1:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection keep-alive;
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_buffering off;
                }
                #access_log /mnt/efs/nginx/access.log;
                #error_log /mnt/efs/nginx/error.log;
            }
            NGINX

            APPROOT="/opt/cloudshirt"
            PUBLISH="$APPROOT/publish"
            mkdir -p "$APPROOT"
            chown ec2-user:ec2-user "$APPROOT"

            sudo -u ec2-user bash -lc "
              set -e
              git clone --branch ${RepoBranch} ${RepoUrl} $APPROOT/src
              cd $APPROOT/src/src/Web
              sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' appsettings.json
              sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=${DBUsername};Password=${DBPassword};Initial Catalog=Microsoft.eShopOnWeb.Identity;/' appsettings.json
              dotnet restore
              dotnet publish -c Release -o $PUBLISH
            "

            # Systemd service
            cat >/etc/systemd/system/cloudshirt.service <<'SERVICE'
            [Unit]
            Description=CloudShirt ASP.NET Core Web App
            After=network.target

            [Service]
            WorkingDirectory=/opt/cloudshirt/publish
            ExecStart=/usr/bin/dotnet /opt/cloudshirt/publish/Web.dll
            Restart=always
            RestartSec=5
            KillSignal=SIGINT
            SyslogIdentifier=cloudshirt
            User=ec2-user
            Environment=ASPNETCORE_ENVIRONMENT=Production
            Environment=ASPNETCORE_URLS=http://0.0.0.0:5000

            [Install]
            WantedBy=multi-user.target
            SERVICE

            systemctl daemon-reload
            systemctl enable cloudshirt
            systemctl start cloudshirt
            systemctl restart nginx

            # Install Filebeat
            rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

            cat <<EOF > /etc/yum.repos.d/elastic.repo
            [elastic-8.x]
            name=Elastic repository for 8.x packages
            baseurl=https://artifacts.elastic.co/packages/8.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=1
            autorefresh=1
            type=rpm-md
            EOF

            yum install -y filebeat

            # Disable default Elasticsearch output (to avoid multiple outputs)
            sed -i 's/^output.elasticsearch:/#output.elasticsearch:/' /etc/filebeat/filebeat.yml
            sed -i 's/^  hosts:/#  hosts:/' /etc/filebeat/filebeat.yml

            # Append clean Logstash output block at the end of filebeat.yml
            cat <<EOT >> /etc/filebeat/filebeat.yml

            output.logstash:
              hosts: ["${ELKPublicIP}:5044"]
            EOT

            # Enable system module for Filebeat
            filebeat modules enable system

            # Configure system module (syslog + auth)
            cat <<EOF > /etc/filebeat/modules.d/system.yml
            - module: system
              syslog:
                enabled: true
                var.paths: ["/var/log/messages"]
              auth:
                enabled: true
                var.paths: ["/var/log/secure"]
            EOF

            # Enable and start Filebeat
            systemctl enable filebeat
            systemctl restart filebeat
            
          - RDSENDPOINT: !ImportValue rds-stack:RDSEndpointAddress
            DBUsername: !ImportValue rds-stack:RDSUsername
            DBPassword: !ImportValue rds-stack:RDSPassword
            EFS_ID: !ImportValue efs-stack:EFSid
            ELKPublicIP: !ImportValue elk-stack:ELKPublicIP

Outputs:
  Instance1Id:
    Description: EC2 Instance 1 ID
    Value: !Ref WebInstance1
    Export:
      Name: !Sub "${AWS::StackName}:Instance1"
  
  Instance2Id:
    Description: EC2 Instance 2 ID
    Value: !Ref WebInstance2
    Export:
      Name: !Sub "${AWS::StackName}:Instance2"
